<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- 
	<import resource="context-datasource.xml" />
	<import resource="context-transaction.xml" />
-->
<!-- 
	 <bean id="collectionBean"
	 	class="com.springbook.ioc.injection.CollectionBean">
	 	<property name="addressList">
	 		<list>
	 			<value>서울시 강남구 역삼동</value>	
	 			<value>서울시 성동구 행당동</value>
	 		</list>
	 	</property>
	 </bean>
 -->
	 
	 <!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000" > -->
	 	
	 	<!-- 
	 	<constructor-arg ref="sony"></constructor-arg>
	 	<constructor-arg value="2700000"></constructor-arg>	 	
	 	-->
	 	<!-- 
	 	<constructor-arg index="0" ref="sony"></constructor-arg>
	 	<constructor-arg index="1" value="2700000"></constructor-arg>
	 	-->
	 	<!-- 
	 	<constructor-arg ref="apple"></constructor-arg>
	 	<constructor-arg value="2700000"></constructor-arg>
	 	-->
	 	<!-- 
	 	<property name="speaker" ref="apple"></property>
	 	<property name="price" value="2700000"></property> 
	 	-->
	 <!-- </bean>  -->
<!-- 
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>

	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
-->

	<!-- <bean class="polymorphism.SamsungTV" /> -->
	
	<!-- 객체를 생성한 후 멤버변수 초기화 작업이 필요한 경우 필요한 메소드를 호출한다. -->	
	<!-- <bean class="polymorphism.SamsungTV" init-method="initMethod" /> -->
	
	<!-- 스프링 컨테이너가 객체를 삭제하기 직전에 호출될 임의의 메소드 지정가능 -->
	<!-- <bean class="polymorphism.SamsungTV" init-method="destroyMethod" /> -->
	
	<!-- lazy-init 컨테이너가 구동되는 시점이 아니라 해당<bean>이 사용되는 시점에 객체생성 -->
	<!-- <bean class="polymorphism.SamsungTV" lazy-init="true" /> -->
	
	<!-- singletone은 scope의 기본 속성값. 해당 bean이 스프링 컨테이너에 의해 단 하나만 생성되어 운용 -->
	<!-- <bean class="polymorphism.SamsungTV" scope="singleton" /> -->
	
	<!-- bean의 scope 속성을 "prototype"으로 지정하면 스프링 컨테이너는 해당 <bean>이 요청될 때마다 새로운 객체를 생성하여 반환한다 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype" />  -->
	
</beans>
